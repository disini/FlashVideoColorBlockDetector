package findc{	import flash.display.Sprite;	import flash.display.BitmapData;	import flash.geom.Point;	public class pastePicture extends Sprite	{		private var vertices:Vector.<Number >  = new Vector.<Number >   ;		private var indices:Vector.<int >  = new Vector.<int >   ;		private var uvdata:Vector.<Number >  = new Vector.<Number >   ;		private var sprite:Sprite = new Sprite();		private var prevpoints:Array;		private var fix:Number;		private var j:int;		public function pastePicture()		{			init();		}		private function init():void		{			uvdata.push(0,0);			uvdata.push(1,0);			uvdata.push(1,1);			uvdata.push(0,1);			indices.push(0,1,2);			indices.push(2,3,0);			prevpoints = [new Point(),new Point(),new Point(),new Point()];			//fix = 3;		}		public function drawpic(bmpdata:BitmapData,points:Array,_fix:Number = 1):Sprite		{			fix = _fix;			if (vertices.length > 0)			{				if (checkpoint(points[0],prevpoints[0],fix) && checkpoint(points[1],prevpoints[1],fix) && checkpoint(points[2],prevpoints[2],fix) && checkpoint(points[3],prevpoints[3],fix))				{					//如果用prevpoints[j] = points[j]的话，也还是会跟着points一起变					for (j=0; j<4; j++)					{						prevpoints[j].x = points[j].x;						prevpoints[j].y = points[j].y;					}					return sprite;				}			}			vertices.length = 0;			vertices.push(points[0].x,points[0].y);			vertices.push(points[1].x,points[1].y);			vertices.push(points[2].x,points[2].y);			vertices.push(points[3].x,points[3].y);			for (j=0; j<4; j++)			{				prevpoints[j].x = points[j].x;				prevpoints[j].y = points[j].y;			}			sprite.graphics.clear();			sprite.graphics.beginBitmapFill(bmpdata);			sprite.graphics.drawTriangles(vertices,indices,uvdata);			sprite.graphics.endFill();			return sprite;		}		private function checkpoint(point:Point,prevpoint:Point,fixnum:Number):Boolean		{			if (point.x > prevpoint.x - fixnum && point.x < prevpoint.x + fixnum && point.y > prevpoint.y - fixnum && point.y < prevpoint.y + fixnum)			{				return true;			}			return false;		}	}}